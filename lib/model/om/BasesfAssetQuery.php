<?php


/**
 * Base class that represents a query for the 'sf_asset' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.0-dev on:
 *
 * Thu Mar  3 18:13:39 2011
 *
 * @method     sfAssetQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     sfAssetQuery orderByFolderId($order = Criteria::ASC) Order by the folder_id column
 * @method     sfAssetQuery orderByFilename($order = Criteria::ASC) Order by the filename column
 * @method     sfAssetQuery orderByDescription($order = Criteria::ASC) Order by the description column
 * @method     sfAssetQuery orderByAuthor($order = Criteria::ASC) Order by the author column
 * @method     sfAssetQuery orderByCopyright($order = Criteria::ASC) Order by the copyright column
 * @method     sfAssetQuery orderByType($order = Criteria::ASC) Order by the type column
 * @method     sfAssetQuery orderByFilesize($order = Criteria::ASC) Order by the filesize column
 * @method     sfAssetQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method     sfAssetQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 *
 * @method     sfAssetQuery groupById() Group by the id column
 * @method     sfAssetQuery groupByFolderId() Group by the folder_id column
 * @method     sfAssetQuery groupByFilename() Group by the filename column
 * @method     sfAssetQuery groupByDescription() Group by the description column
 * @method     sfAssetQuery groupByAuthor() Group by the author column
 * @method     sfAssetQuery groupByCopyright() Group by the copyright column
 * @method     sfAssetQuery groupByType() Group by the type column
 * @method     sfAssetQuery groupByFilesize() Group by the filesize column
 * @method     sfAssetQuery groupByCreatedAt() Group by the created_at column
 * @method     sfAssetQuery groupByUpdatedAt() Group by the updated_at column
 *
 * @method     sfAssetQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     sfAssetQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     sfAssetQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     sfAssetQuery leftJoinsfAssetFolder($relationAlias = null) Adds a LEFT JOIN clause to the query using the sfAssetFolder relation
 * @method     sfAssetQuery rightJoinsfAssetFolder($relationAlias = null) Adds a RIGHT JOIN clause to the query using the sfAssetFolder relation
 * @method     sfAssetQuery innerJoinsfAssetFolder($relationAlias = null) Adds a INNER JOIN clause to the query using the sfAssetFolder relation
 *
 * @method     sfAssetQuery leftJoinProdottoRelatedByFotoBase($relationAlias = null) Adds a LEFT JOIN clause to the query using the ProdottoRelatedByFotoBase relation
 * @method     sfAssetQuery rightJoinProdottoRelatedByFotoBase($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ProdottoRelatedByFotoBase relation
 * @method     sfAssetQuery innerJoinProdottoRelatedByFotoBase($relationAlias = null) Adds a INNER JOIN clause to the query using the ProdottoRelatedByFotoBase relation
 *
 * @method     sfAssetQuery leftJoinProdottoRelatedByThumb01($relationAlias = null) Adds a LEFT JOIN clause to the query using the ProdottoRelatedByThumb01 relation
 * @method     sfAssetQuery rightJoinProdottoRelatedByThumb01($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ProdottoRelatedByThumb01 relation
 * @method     sfAssetQuery innerJoinProdottoRelatedByThumb01($relationAlias = null) Adds a INNER JOIN clause to the query using the ProdottoRelatedByThumb01 relation
 *
 * @method     sfAssetQuery leftJoinProdottoRelatedByThumb02($relationAlias = null) Adds a LEFT JOIN clause to the query using the ProdottoRelatedByThumb02 relation
 * @method     sfAssetQuery rightJoinProdottoRelatedByThumb02($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ProdottoRelatedByThumb02 relation
 * @method     sfAssetQuery innerJoinProdottoRelatedByThumb02($relationAlias = null) Adds a INNER JOIN clause to the query using the ProdottoRelatedByThumb02 relation
 *
 * @method     sfAssetQuery leftJoinProdottoRelatedByThumb03($relationAlias = null) Adds a LEFT JOIN clause to the query using the ProdottoRelatedByThumb03 relation
 * @method     sfAssetQuery rightJoinProdottoRelatedByThumb03($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ProdottoRelatedByThumb03 relation
 * @method     sfAssetQuery innerJoinProdottoRelatedByThumb03($relationAlias = null) Adds a INNER JOIN clause to the query using the ProdottoRelatedByThumb03 relation
 *
 * @method     sfAssetQuery leftJoinProdottoRelatedByThumb04($relationAlias = null) Adds a LEFT JOIN clause to the query using the ProdottoRelatedByThumb04 relation
 * @method     sfAssetQuery rightJoinProdottoRelatedByThumb04($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ProdottoRelatedByThumb04 relation
 * @method     sfAssetQuery innerJoinProdottoRelatedByThumb04($relationAlias = null) Adds a INNER JOIN clause to the query using the ProdottoRelatedByThumb04 relation
 *
 * @method     sfAssetQuery leftJoinProdottoRelatedByThumb05($relationAlias = null) Adds a LEFT JOIN clause to the query using the ProdottoRelatedByThumb05 relation
 * @method     sfAssetQuery rightJoinProdottoRelatedByThumb05($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ProdottoRelatedByThumb05 relation
 * @method     sfAssetQuery innerJoinProdottoRelatedByThumb05($relationAlias = null) Adds a INNER JOIN clause to the query using the ProdottoRelatedByThumb05 relation
 *
 * @method     sfAsset findOne(PropelPDO $con = null) Return the first sfAsset matching the query
 * @method     sfAsset findOneOrCreate(PropelPDO $con = null) Return the first sfAsset matching the query, or a new sfAsset object populated from the query conditions when no match is found
 *
 * @method     sfAsset findOneById(int $id) Return the first sfAsset filtered by the id column
 * @method     sfAsset findOneByFolderId(int $folder_id) Return the first sfAsset filtered by the folder_id column
 * @method     sfAsset findOneByFilename(string $filename) Return the first sfAsset filtered by the filename column
 * @method     sfAsset findOneByDescription(string $description) Return the first sfAsset filtered by the description column
 * @method     sfAsset findOneByAuthor(string $author) Return the first sfAsset filtered by the author column
 * @method     sfAsset findOneByCopyright(string $copyright) Return the first sfAsset filtered by the copyright column
 * @method     sfAsset findOneByType(string $type) Return the first sfAsset filtered by the type column
 * @method     sfAsset findOneByFilesize(int $filesize) Return the first sfAsset filtered by the filesize column
 * @method     sfAsset findOneByCreatedAt(string $created_at) Return the first sfAsset filtered by the created_at column
 * @method     sfAsset findOneByUpdatedAt(string $updated_at) Return the first sfAsset filtered by the updated_at column
 *
 * @method     array findById(int $id) Return sfAsset objects filtered by the id column
 * @method     array findByFolderId(int $folder_id) Return sfAsset objects filtered by the folder_id column
 * @method     array findByFilename(string $filename) Return sfAsset objects filtered by the filename column
 * @method     array findByDescription(string $description) Return sfAsset objects filtered by the description column
 * @method     array findByAuthor(string $author) Return sfAsset objects filtered by the author column
 * @method     array findByCopyright(string $copyright) Return sfAsset objects filtered by the copyright column
 * @method     array findByType(string $type) Return sfAsset objects filtered by the type column
 * @method     array findByFilesize(int $filesize) Return sfAsset objects filtered by the filesize column
 * @method     array findByCreatedAt(string $created_at) Return sfAsset objects filtered by the created_at column
 * @method     array findByUpdatedAt(string $updated_at) Return sfAsset objects filtered by the updated_at column
 *
 * @package    propel.generator.plugins.sfAssetsLibraryPlugin.lib.model.om
 */
abstract class BasesfAssetQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BasesfAssetQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'sfAsset', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new sfAssetQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    sfAssetQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof sfAssetQuery) {
			return $criteria;
		}
		$query = new sfAssetQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    sfAsset|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = sfAssetPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(sfAssetPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(sfAssetPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * @param     int|array $id The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(sfAssetPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the folder_id column
	 * 
	 * @param     int|array $folderId The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByFolderId($folderId = null, $comparison = null)
	{
		if (is_array($folderId)) {
			$useMinMax = false;
			if (isset($folderId['min'])) {
				$this->addUsingAlias(sfAssetPeer::FOLDER_ID, $folderId['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($folderId['max'])) {
				$this->addUsingAlias(sfAssetPeer::FOLDER_ID, $folderId['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfAssetPeer::FOLDER_ID, $folderId, $comparison);
	}

	/**
	 * Filter the query on the filename column
	 * 
	 * @param     string $filename The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByFilename($filename = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($filename)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $filename)) {
				$filename = str_replace('*', '%', $filename);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfAssetPeer::FILENAME, $filename, $comparison);
	}

	/**
	 * Filter the query on the description column
	 * 
	 * @param     string $description The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByDescription($description = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($description)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $description)) {
				$description = str_replace('*', '%', $description);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfAssetPeer::DESCRIPTION, $description, $comparison);
	}

	/**
	 * Filter the query on the author column
	 * 
	 * @param     string $author The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByAuthor($author = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($author)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $author)) {
				$author = str_replace('*', '%', $author);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfAssetPeer::AUTHOR, $author, $comparison);
	}

	/**
	 * Filter the query on the copyright column
	 * 
	 * @param     string $copyright The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByCopyright($copyright = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($copyright)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $copyright)) {
				$copyright = str_replace('*', '%', $copyright);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfAssetPeer::COPYRIGHT, $copyright, $comparison);
	}

	/**
	 * Filter the query on the type column
	 * 
	 * @param     string $type The value to use as filter.
	 *            Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByType($type = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($type)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $type)) {
				$type = str_replace('*', '%', $type);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(sfAssetPeer::TYPE, $type, $comparison);
	}

	/**
	 * Filter the query on the filesize column
	 * 
	 * @param     int|array $filesize The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByFilesize($filesize = null, $comparison = null)
	{
		if (is_array($filesize)) {
			$useMinMax = false;
			if (isset($filesize['min'])) {
				$this->addUsingAlias(sfAssetPeer::FILESIZE, $filesize['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($filesize['max'])) {
				$this->addUsingAlias(sfAssetPeer::FILESIZE, $filesize['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfAssetPeer::FILESIZE, $filesize, $comparison);
	}

	/**
	 * Filter the query on the created_at column
	 * 
	 * @param     string|array $createdAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByCreatedAt($createdAt = null, $comparison = null)
	{
		if (is_array($createdAt)) {
			$useMinMax = false;
			if (isset($createdAt['min'])) {
				$this->addUsingAlias(sfAssetPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($createdAt['max'])) {
				$this->addUsingAlias(sfAssetPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfAssetPeer::CREATED_AT, $createdAt, $comparison);
	}

	/**
	 * Filter the query on the updated_at column
	 * 
	 * @param     string|array $updatedAt The value to use as filter.
	 *            Accepts an associative array('min' => $minValue, 'max' => $maxValue)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByUpdatedAt($updatedAt = null, $comparison = null)
	{
		if (is_array($updatedAt)) {
			$useMinMax = false;
			if (isset($updatedAt['min'])) {
				$this->addUsingAlias(sfAssetPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($updatedAt['max'])) {
				$this->addUsingAlias(sfAssetPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(sfAssetPeer::UPDATED_AT, $updatedAt, $comparison);
	}

	/**
	 * Filter the query by a related sfAssetFolder object
	 *
	 * @param     sfAssetFolder|PropelCollection $sfAssetFolder The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterBysfAssetFolder($sfAssetFolder, $comparison = null)
	{
		if ($sfAssetFolder instanceof sfAssetFolder) {
			return $this
				->addUsingAlias(sfAssetPeer::FOLDER_ID, $sfAssetFolder->getId(), $comparison);
		} elseif ($sfAssetFolder instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(sfAssetPeer::FOLDER_ID, $sfAssetFolder->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterBysfAssetFolder() only accepts arguments of type sfAssetFolder or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the sfAssetFolder relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function joinsfAssetFolder($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('sfAssetFolder');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'sfAssetFolder');
		}
		
		return $this;
	}

	/**
	 * Use the sfAssetFolder relation sfAssetFolder object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfAssetFolderQuery A secondary query class using the current class as primary query
	 */
	public function usesfAssetFolderQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
	{
		return $this
			->joinsfAssetFolder($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'sfAssetFolder', 'sfAssetFolderQuery');
	}

	/**
	 * Filter the query by a related Prodotto object
	 *
	 * @param     Prodotto $prodotto  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByProdottoRelatedByFotoBase($prodotto, $comparison = null)
	{
		if ($prodotto instanceof Prodotto) {
			return $this
				->addUsingAlias(sfAssetPeer::ID, $prodotto->getFotoBase(), $comparison);
		} elseif ($prodotto instanceof PropelCollection) {
			return $this
				->useProdottoRelatedByFotoBaseQuery()
					->filterByPrimaryKeys($prodotto->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByProdottoRelatedByFotoBase() only accepts arguments of type Prodotto or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ProdottoRelatedByFotoBase relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function joinProdottoRelatedByFotoBase($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ProdottoRelatedByFotoBase');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ProdottoRelatedByFotoBase');
		}
		
		return $this;
	}

	/**
	 * Use the ProdottoRelatedByFotoBase relation Prodotto object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ProdottoQuery A secondary query class using the current class as primary query
	 */
	public function useProdottoRelatedByFotoBaseQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinProdottoRelatedByFotoBase($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ProdottoRelatedByFotoBase', 'ProdottoQuery');
	}

	/**
	 * Filter the query by a related Prodotto object
	 *
	 * @param     Prodotto $prodotto  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByProdottoRelatedByThumb01($prodotto, $comparison = null)
	{
		if ($prodotto instanceof Prodotto) {
			return $this
				->addUsingAlias(sfAssetPeer::ID, $prodotto->getThumb01(), $comparison);
		} elseif ($prodotto instanceof PropelCollection) {
			return $this
				->useProdottoRelatedByThumb01Query()
					->filterByPrimaryKeys($prodotto->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByProdottoRelatedByThumb01() only accepts arguments of type Prodotto or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ProdottoRelatedByThumb01 relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function joinProdottoRelatedByThumb01($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ProdottoRelatedByThumb01');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ProdottoRelatedByThumb01');
		}
		
		return $this;
	}

	/**
	 * Use the ProdottoRelatedByThumb01 relation Prodotto object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ProdottoQuery A secondary query class using the current class as primary query
	 */
	public function useProdottoRelatedByThumb01Query($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinProdottoRelatedByThumb01($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ProdottoRelatedByThumb01', 'ProdottoQuery');
	}

	/**
	 * Filter the query by a related Prodotto object
	 *
	 * @param     Prodotto $prodotto  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByProdottoRelatedByThumb02($prodotto, $comparison = null)
	{
		if ($prodotto instanceof Prodotto) {
			return $this
				->addUsingAlias(sfAssetPeer::ID, $prodotto->getThumb02(), $comparison);
		} elseif ($prodotto instanceof PropelCollection) {
			return $this
				->useProdottoRelatedByThumb02Query()
					->filterByPrimaryKeys($prodotto->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByProdottoRelatedByThumb02() only accepts arguments of type Prodotto or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ProdottoRelatedByThumb02 relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function joinProdottoRelatedByThumb02($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ProdottoRelatedByThumb02');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ProdottoRelatedByThumb02');
		}
		
		return $this;
	}

	/**
	 * Use the ProdottoRelatedByThumb02 relation Prodotto object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ProdottoQuery A secondary query class using the current class as primary query
	 */
	public function useProdottoRelatedByThumb02Query($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinProdottoRelatedByThumb02($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ProdottoRelatedByThumb02', 'ProdottoQuery');
	}

	/**
	 * Filter the query by a related Prodotto object
	 *
	 * @param     Prodotto $prodotto  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByProdottoRelatedByThumb03($prodotto, $comparison = null)
	{
		if ($prodotto instanceof Prodotto) {
			return $this
				->addUsingAlias(sfAssetPeer::ID, $prodotto->getThumb03(), $comparison);
		} elseif ($prodotto instanceof PropelCollection) {
			return $this
				->useProdottoRelatedByThumb03Query()
					->filterByPrimaryKeys($prodotto->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByProdottoRelatedByThumb03() only accepts arguments of type Prodotto or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ProdottoRelatedByThumb03 relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function joinProdottoRelatedByThumb03($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ProdottoRelatedByThumb03');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ProdottoRelatedByThumb03');
		}
		
		return $this;
	}

	/**
	 * Use the ProdottoRelatedByThumb03 relation Prodotto object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ProdottoQuery A secondary query class using the current class as primary query
	 */
	public function useProdottoRelatedByThumb03Query($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinProdottoRelatedByThumb03($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ProdottoRelatedByThumb03', 'ProdottoQuery');
	}

	/**
	 * Filter the query by a related Prodotto object
	 *
	 * @param     Prodotto $prodotto  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByProdottoRelatedByThumb04($prodotto, $comparison = null)
	{
		if ($prodotto instanceof Prodotto) {
			return $this
				->addUsingAlias(sfAssetPeer::ID, $prodotto->getThumb04(), $comparison);
		} elseif ($prodotto instanceof PropelCollection) {
			return $this
				->useProdottoRelatedByThumb04Query()
					->filterByPrimaryKeys($prodotto->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByProdottoRelatedByThumb04() only accepts arguments of type Prodotto or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ProdottoRelatedByThumb04 relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function joinProdottoRelatedByThumb04($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ProdottoRelatedByThumb04');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ProdottoRelatedByThumb04');
		}
		
		return $this;
	}

	/**
	 * Use the ProdottoRelatedByThumb04 relation Prodotto object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ProdottoQuery A secondary query class using the current class as primary query
	 */
	public function useProdottoRelatedByThumb04Query($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinProdottoRelatedByThumb04($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ProdottoRelatedByThumb04', 'ProdottoQuery');
	}

	/**
	 * Filter the query by a related Prodotto object
	 *
	 * @param     Prodotto $prodotto  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function filterByProdottoRelatedByThumb05($prodotto, $comparison = null)
	{
		if ($prodotto instanceof Prodotto) {
			return $this
				->addUsingAlias(sfAssetPeer::ID, $prodotto->getThumb05(), $comparison);
		} elseif ($prodotto instanceof PropelCollection) {
			return $this
				->useProdottoRelatedByThumb05Query()
					->filterByPrimaryKeys($prodotto->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByProdottoRelatedByThumb05() only accepts arguments of type Prodotto or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ProdottoRelatedByThumb05 relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function joinProdottoRelatedByThumb05($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ProdottoRelatedByThumb05');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ProdottoRelatedByThumb05');
		}
		
		return $this;
	}

	/**
	 * Use the ProdottoRelatedByThumb05 relation Prodotto object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ProdottoQuery A secondary query class using the current class as primary query
	 */
	public function useProdottoRelatedByThumb05Query($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinProdottoRelatedByThumb05($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ProdottoRelatedByThumb05', 'ProdottoQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     sfAsset $sfAsset Object to remove from the list of results
	 *
	 * @return    sfAssetQuery The current query, for fluid interface
	 */
	public function prune($sfAsset = null)
	{
		if ($sfAsset) {
			$this->addUsingAlias(sfAssetPeer::ID, $sfAsset->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

	// timestampable behavior
	
	/**
	 * Filter by the latest updated
	 *
	 * @param      int $nbDays Maximum age of the latest update in days
	 *
	 * @return     sfAssetQuery The current query, for fluid interface
	 */
	public function recentlyUpdated($nbDays = 7)
	{
		return $this->addUsingAlias(sfAssetPeer::UPDATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Filter by the latest created
	 *
	 * @param      int $nbDays Maximum age of in days
	 *
	 * @return     sfAssetQuery The current query, for fluid interface
	 */
	public function recentlyCreated($nbDays = 7)
	{
		return $this->addUsingAlias(sfAssetPeer::CREATED_AT, time() - $nbDays * 24 * 60 * 60, Criteria::GREATER_EQUAL);
	}
	
	/**
	 * Order by update date desc
	 *
	 * @return     sfAssetQuery The current query, for fluid interface
	 */
	public function lastUpdatedFirst()
	{
		return $this->addDescendingOrderByColumn(sfAssetPeer::UPDATED_AT);
	}
	
	/**
	 * Order by update date asc
	 *
	 * @return     sfAssetQuery The current query, for fluid interface
	 */
	public function firstUpdatedFirst()
	{
		return $this->addAscendingOrderByColumn(sfAssetPeer::UPDATED_AT);
	}
	
	/**
	 * Order by create date desc
	 *
	 * @return     sfAssetQuery The current query, for fluid interface
	 */
	public function lastCreatedFirst()
	{
		return $this->addDescendingOrderByColumn(sfAssetPeer::CREATED_AT);
	}
	
	/**
	 * Order by create date asc
	 *
	 * @return     sfAssetQuery The current query, for fluid interface
	 */
	public function firstCreatedFirst()
	{
		return $this->addAscendingOrderByColumn(sfAssetPeer::CREATED_AT);
	}

} // BasesfAssetQuery
